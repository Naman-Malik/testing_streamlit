CREATE DATABASE IF NOT EXISTS SAMPLEDATABASE;
CREATE SCHEMA IF NOT EXISTS PRODUCT_FORECAST;
USE SCHEMA PRODUCT_FORECAST;

CREATE
OR REPLACE FILE FORMAT CSV_FF TYPE = 'CSV' SKIP_HEADER = 1,
COMPRESSION = AUTO;

CREATE
OR REPLACE STAGE S3LOAD COMMENT = 'Quickstart S3 Stage Connection' URL = 's3://sfquickstarts/notebook_demos/frostbyte_tastybytes/' FILE_FORMAT = CSV_FF;

CREATE
OR REPLACE TABLE PUBLIC_HOLIDAYS(
    DATE DATE,
    HOLIDAY_NAME VARCHAR,
    IS_FINANCIAL BOOLEAN
);

COPY INTO PUBLIC_HOLIDAYS
FROM
    @s3load/holidays.csv;

CREATE 
OR REPLACE STAGE S3LOAD COMMENT = 'Quickstart S3 Stage Connection' URL = 's3://sfquickstarts/frostbyte_tastybytes/mlpf_quickstart/' FILE_FORMAT = CSV_FF;

CREATE
OR REPLACE TABLE STORE_SALES(
    DATE DATE,
    PRIMARY_CITY VARCHAR,
    MENU_ITEM_NAME VARCHAR,
    TOTAL_SOLD NUMBER
);

COPY INTO STORE_SALES
FROM
    @s3load/ml_functions_quickstart.csv;

CREATE
OR REPLACE TABLE LAST_YEAR_SALES AS (
    SELECT
        TO_TIMESTAMP_NTZ(DATE) AS TIMESTAMP,
        PRIMARY_CITY,
        MENU_ITEM_NAME,
        TOTAL_SOLD
    FROM
        STORE_SALES
    WHERE
        DATE > (
            SELECT
                MAX(DATE) - INTERVAL '1 YEAR'
            FROM
                STORE_SALES
        )
    GROUP BY
        ALL
);


CREATE
OR REPLACE VIEW PRODUCTS_SALES AS (
    SELECT
        VS.TIMESTAMP,
        VS.MENU_ITEM_NAME,
        VS.TOTAL_SOLD,
        COALESCE(CH.HOLIDAY_NAME, '') AS HOLIDAY_NAME
    FROM
        LAST_YEAR_SALES VS
        LEFT JOIN PUBLIC_HOLIDAYS CH ON VS.TIMESTAMP = CH.DATE
);

-- Train model, this could take ~15-25 seconds. Please be patient.
CREATE
OR REPLACE SNOWFLAKE.ML.FORECAST PRODUCTS_FORECAST (
    INPUT_DATA => TABLE(PRODUCTS_SALES),
    SERIES_COLNAME => 'MENU_ITEM_NAME',
    TIMESTAMP_COLNAME => 'TIMESTAMP',
    TARGET_COLNAME => 'TOTAL_SOLD'
);


CREATE
OR REPLACE VIEW PRODUCTS_FORECAST_DATA AS (
    WITH FUTURE_DATES AS (
        SELECT
            '2023-05-28' :: DATE + ROW_NUMBER() OVER (
                ORDER BY
                    0
            ) AS TIMESTAMP
        FROM
            TABLE(GENERATOR(ROWCOUNT => 30))
    ),
    FOOD_ITEMS AS (
        SELECT
            DISTINCT MENU_ITEM_NAME
        FROM
            PRODUCTS_SALES
    ),
    JOINED_MENU_ITEMS AS (
        SELECT
            *
        FROM
            FOOD_ITEMS
            CROSS JOIN FUTURE_DATES
        ORDER BY
            MENU_ITEM_NAME ASC,
            TIMESTAMP ASC
    )
    SELECT
        JMI.MENU_ITEM_NAME,
        TO_TIMESTAMP_NTZ(JMI.TIMESTAMP) AS TIMESTAMP,
        CH.HOLIDAY_NAME
    FROM
        JOINED_MENU_ITEMS AS JMI
        LEFT JOIN PUBLIC_HOLIDAYS CH ON JMI.TIMESTAMP = CH.DATE
    ORDER BY
        JMI.MENU_ITEM_NAME ASC,
        JMI.TIMESTAMP ASC
);


CREATE
OR REPLACE VIEW PRODUCTS_ANOMALY_TRAINING_SET AS (
    SELECT
        *
    FROM
        LAST_YEAR_SALES
    WHERE
        TIMESTAMP < (
            SELECT
                MAX(TIMESTAMP)
            FROM
                LAST_YEAR_SALES
        ) - INTERVAL '1 MONTH'
);

CREATE
OR REPLACE VIEW PRODUCTS_ANOMALY_ANALYSIS_SET AS (
    SELECT
        *
    FROM
        LAST_YEAR_SALES
    WHERE
        TIMESTAMP > (
            SELECT
                MAX(TIMESTAMP)
            FROM
                PRODUCTS_ANOMALY_TRAINING_SET
        )
);

CREATE OR REPLACE SNOWFLAKE.ML.ANOMALY_DETECTION PRODUCTS_ANOMALY_MODEL(
    INPUT_DATA => TABLE(PRODUCTS_ANOMALY_TRAINING_SET),
    SERIES_COLNAME => 'MENU_ITEM_NAME',
    TIMESTAMP_COLNAME => 'TIMESTAMP',
    TARGET_COLNAME => 'TOTAL_SOLD',
    LABEL_COLNAME => ''
); 